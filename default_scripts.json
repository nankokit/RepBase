{
  "новый скрипт": "",
  "репточки с рейтингом выше 4.5": "SELECT * FROM main.rehearsal_points WHERE rating > 4.5 ORDER BY name;",
  "все репточки c их комнатами": "SELECT rp.id, rp.name, r.name AS room_name, rp.address FROM main.rehearsal_points rp INNER JOIN main.rooms r ON r.id_rehearsal_point = rp.id ORDER BY name;",
  "комнаты с площадью более 25 метров квадратных": "SELECT r.*, rp.name AS rehearsal_point_name, rp.address AS rehearsal_point_address FROM main.rooms r INNER JOIN main.rehearsal_points rp ON r.id_rehearsal_point = rp.id WHERE r.area > 25 ORDER BY r.price;",
  "названия и цены комнат с кондиционером и возможностью записи": "SELECT r.name, r.price, rp.name AS rehearsal_point_name FROM main.rooms r INNER JOIN main.rehearsal_points rp ON r.id_rehearsal_point = rp.id WHERE r.air_conditioner = true AND r.recording_support = true ORDER BY r.price;",
  "услуги с типом “аренда”": "SELECT * FROM main.service WHERE type = 'Rental' ORDER BY price DESC;",
  "список услуг сведения треков с ценой и названием репточки": "SELECT s.name, s.price, rp.name AS rehearsal_point_name FROM main.service s INNER JOIN main.rehearsal_points rp ON s.id_rehearsal_point = rp.id WHERE s.name = 'Mixing Service' ORDER BY price;",
  "новые барабанные установки": "SELECT * FROM main.equipment WHERE name = 'Drum Kit' AND condition = 'new' ORDER BY brand;",
  "оборудование, которое указано в активных бронированиях": "SELECT e.*, b.id AS booking_id, b.status AS booking_status FROM main.equipment e INNER JOIN main.equipment_booking e_b ON e_b.id_equipment = e.id INNER JOIN main.booking b ON e_b.id_booking = b.id WHERE b.status = 'active';",
  "сотрудники старше 30 лет с названиями их репточек": "SELECT s.*, rp.name AS rehearsal_point_name FROM main.staff s INNER JOIN main.rehearsal_points rp ON s.id_rehearsal_point = rp.id WHERE s.age > 30 ORDER BY rp.name, s.full_name;",
  "сотрудники c опытом больше 5 лет": "SELECT * FROM main.staff WHERE experience > 5 ORDER BY id;",
  "пользователи с датой регистрации до 2023 года": "SELECT * FROM main.users WHERE registration_date < '2023-01-01 00:00:00' ORDER BY full_name;",
  "активные брони с именем и телефоном пользователя": "SELECT b.*, u.full_name, u.phone FROM main.booking b INNER JOIN main.users u ON b.id_user = u.id WHERE b.status = 'active' ORDER BY b.time;",
  "репточки с рейтингом выше среднего": "SELECT name, rating FROM main.rehearsal_points WHERE rating > (SELECT AVG(rating) FROM main.rehearsal_points);",
  "репточки с комнатами дешевле средней стоимости": "SELECT rp.name, r.name, r.price FROM main.rehearsal_points rp JOIN main.rooms r ON r.id_rehearsal_point = rp.id WHERE r.price < (SELECT AVG(price) FROM main.rooms);",
  "комнаты с ценой выше средней и возможностью звукозаписи": "SELECT id, name, price FROM main.rooms WHERE price > (SELECT AVG(price) FROM main.rooms) AND recording_support = true;",
  "количество комнат с кондиционером в репточках": "SELECT rp.name, COUNT(*) AS air_conditioned_rooms FROM main.rooms r JOIN main.rehearsal_points rp ON r.id_rehearsal_point = rp.id WHERE air_conditioner = TRUE GROUP BY rp.name;",
  "количество услуг репточек и список различных типов услуг": "SELECT rp.name, COUNT(*) AS service_count, STRING_AGG(DISTINCT s.type, ', ') FROM main.service s JOIN main.rehearsal_points rp ON s.id_rehearsal_point = rp.id GROUP BY rp.name;",
  "список услуг, чья цена выше средней для своего типа": "SELECT id, name, price FROM main.service s WHERE price > (SELECT AVG(price) FROM main.service sub_s WHERE s.type = sub_s.type);",
  "количество оборудования по репточкам": "SELECT rp.name, COUNT(*) AS equipment_count FROM main.equipment e JOIN main.rehearsal_points rp ON rp.id = e.id_rehearsal_point GROUP BY rp.name;",
  "список оборудования, которое не указано в активных бронированиях": "SELECT name, id FROM main.equipment WHERE id NOT IN (SELECT id_equipment FROM main.equipment_booking);",
  "средний возраст сотрудников по репточкам": "SELECT id_rehearsal_point, ROUND(AVG(age), 2) AS average_age FROM main.staff GROUP BY id_rehearsal_point;",
  "количество сотрудников по возрастным категориям": "WITH age_groups AS (SELECT 'Under 20' AS age_group, 0 AS lower_bound, 19 AS upper_bound UNION ALL SELECT '20-25', 20, 25 UNION ALL SELECT '25-30', 26, 30 UNION ALL SELECT '30-35', 31, 35 UNION ALL SELECT '35-40', 36, 40 UNION ALL SELECT 'Above 40', 41, 100) SELECT ag.age_group, COUNT(s.age) AS staff_count FROM age_groups ag LEFT JOIN main.staff s ON s.age BETWEEN ag.lower_bound AND ag.upper_bound GROUP BY ag.age_group ORDER BY staff_count DESC;",
  "количество зарегистрировавшихся пользователей по месяцам": "SELECT DATE_TRUNC('month', registration_date) AS registration_month, COUNT(*) AS user_count FROM main.users GROUP BY registration_month ORDER BY registration_month;",
  "количество бронирований по статусу": "SELECT status, COUNT(*) AS booking_count FROM main.booking GROUP BY status;"
}